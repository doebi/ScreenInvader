#!/bin/bash
#
# ScreenInvader - A shared media experience. Instant and seamless.
#  Copyright (C) 2012 Amir Hassan <amir@viel-zu.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

FUNCTION="$1"

. /root/triggers/env

declare -A DATA="$(janosh get /display/.)"

function setResolution() {
  xrandr --output "${DATA[/display/adapter/value]}" --mode "${DATA[/display/resolution/value]}" --primary
}

function setBlanking() {
  timeout="${DATA[/display/blank/value]}"
  if [ "$timeout" -gt 0 ]; then
    xset s blank
    xset s $[ $timeout * 60 ]
    xset +dpms
    setterm -blank $timeout
    setterm -powersave on
    setterm -powerdown $timeout

  else
    xset s off
    xset -dpms
    setterm -blank 0
    setterm -powersave off
    setterm -powerdown 0
  fi
}

function readAvailableAdapters() {
  xrandr -q | grep -Po '^\K(.*)(?= connected)'
}

function readAvailableResolutions() {
  xrandr -q | sed "1,/^$1/d" | while read line; do
    if ! echo $line | grep -Po '^\s*\K([0-9]*x[0-9]*)(?=)'; then
      break
    fi
  done 
}

function readCurrentResolution() {
  xrandr -q | grep -m1 -Po 'current \K([0-9]* x [0-9]*)(?=)' | sed 's/ //g'
} 

function reload() {
  janosh set /display/resolution/value $(readCurrentResolution)
  adapter="$(janosh -r get /display/adapter/value)"
  i=0

  readAvailableAdapters | while read a; do
    janosh set "/display/adapter/choices/#$i" "$a"
    i=$[$i+1]
  done

  [ -z $adapter ] && adapter="$(janosh -r get /display/adapter/choices/#0)"

  readAvailableResolutions "$adapter" | while read r; do
    janosh set "/display/resolution/choices/#$i" "$r"
    i=$[$i+1]
  done
}

function apply() {
  setResolution
  setBlanking
  #make sure the mouse cursor isn't visible even if -nocursur fails
  xdotool mousemove 1900 1200
}

function restart() {
  return 0;
}

if [ "$(type -t "$FUNCTION")" == "function" ]; then
  $FUNCTION
else
  echo "Unknown command: $FUNCTION" 1>&2
  exit 1
fi


