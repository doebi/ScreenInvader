#!/bin/bash
#
# ScreenInvader - A shared media experience. Instant and seamless.
#  Copyright (C) 2012 Amir Hassan <amir@viel-zu.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

export VDPAU_DRIVER=sunxi
. /lounge/triggers/functions.sh
l_log $@

RUN_DIR="/var/run/player"
CMD_FIFO="$RUN_DIR/cmdfifo"
CMD_LOCK="$RUN_DIR/cmdlock"
PLAYLIST_CACHE="$RUN_DIR/playlist_cache"
MPLAYERSTDIN="$RUN_DIR/mplayerstdin"

function open() {
  set -x
  declare -A OBJ="$(janosh get /player/.)"
  url="${OBJ[/player/url]}"

  video_url=
  category="${OBJ[/player/category]}"
  t=
  l_unblank

  if [ "$category" != "video" ]; then
    info="$("/lounge/triggers/helpers/$category" "$url")"
    video_urls="$(echo "$info" | sed '$d')"
    t="$(echo "$info" | tail -n1)"
  else
    t="$(basename "$url")"
    video_urls="$url"
  fi
  i=1
  if [ "`echo "$video_urls" | wc -l`" -gt 1 ]; then
    echo "$video_urls" | while read line; do
      loadVideo "$line" "$i - $t" "$url"
      i=$[ $i + 1 ]
    done
  else
    [ -z "$video_urls" ] && video_urls="$url"
    loadVideo "$video_urls" "$t" "$url"
  fi
  janosh -t set "/player/active" true
}

function close() {
  stop
}

function refresh() {
#  feh --bg-center /lounge/www/_inc/img/logo.png
  return
}

function mplayer_start {
  rm -f "$CMD_FIFO"
  rm -f "$CMD_LOCK"
  rm -f "$MPLAYERSTDIN"

  mkdir -p "$RUN_DIR"
  mkfifo "$CMD_FIFO";
  touch "$PLAYLIST_CACHE"
  export http_proxy="http://localhost:1234/"

  while [ 0 ]; do
    sleep 1;
    set -m
    bash -c "/usr/bin/mplayer -include /lounge/mplayer.conf -fs -vc ffh264vdpau,ffmpeg12vdpau, -idle -input file="$CMD_FIFO" 2>&1 | tee /tmp/mplayer | /lounge/bin/player callback"&
    janosh -e setVolume
    fg
 done
}

function mplayer_cmd {
  echo "$@" > "$CMD_FIFO"
}

function showText() {
  (
    flock -x 200
    text="$1"
    duration="$2"
    [ -z "$duration" ] && duration=1000000000
    mplayer_cmd "osd_show_text \"$text\" $duration 1"
  ) 200>$CMD_LOCK
}

function hideText() {
  (
    flock -x 200
    mplayer_cmd "osd_show_text \"\" $duration 0 0"
  ) 200>$CMD_LOCK
}

function index() {
  {
set -x
  idx="`janosh -r get /playlist/index`"
  PLLEN="$(janosh size /playlist/items/.)"
  [ $idx -gt $PLLEN ] && idx=$PLLEN
  file="$(janosh -r get /playlist/items/#${idx}/url)"
  mplayer_cmd "pause"
  janosh -t set /player/active true
  mplayer_cmd "loadfile $file"
  touch "$PLAYLIST_CACHE"
} &> /tmp/index
}

function jump() {
  idx=$1
  PLLEN="$(janosh size /playlist/items/.)"
  [ $idx -gt $PLLEN ] && idx=$PLLEN
  file="$(janosh -r get /playlist/items/#${idx}/url)"
  mplayer_cmd "pause"
  janosh -t set /player/active true
  mplayer_cmd "loadfile $file"
  janosh set /playlist/index $idx
  touch "$PLAYLIST_CACHE"
}

function mute() {
  m="`janosh -r get /sound/mute`"
  if [ "$m" == "true" ]; then
    m=false
    mplayer_cmd "mute 0"
  else
    m=true
    mplayer_cmd "mute 1"
  fi

  janosh set /sound/mute $m
}

function volume() {
  v=$1

  if [ $v -gt 100 ]; then
    v=100;
  elif [ $v -lt 0 ]; then
    v=0;
  fi

  if [ "$v" -eq "$v" ] 2>/dev/null; then
    mplayer_cmd "volume $v 1"
    janosh set /sound/volume $v
  fi
}

function isQueueMode() {
  [ "$(janosh -r get /playlist/queue)" == "true" ] && return 0 || return 1;
}

function playlistAdd() {
 (
  set -x
  playlistEnqueue "$1" "$2" "$3"
  mode=post
  action=Playing
  if isQueueMode; then
     mode=queue;
     action=Queuing
  fi
  notify "$action: $2"
  if [ "`janosh -r get /player/active`" == "false" -o "$mode" == "post" ]; then
    items="`janosh size /playlist/items/.`"
    jump "$[ $items - 1]"
  fi
 ) &> /tmp/playlistAdd
}

function playlistEnqueue() {
  path="$1"
  title="$2"
  src="$3"

  [ -z "$title" ] && title="(no title)"
  size=$(janosh size /playlist/items/.)
  janosh mkobj /playlist/items/#${size}/.
  janosh set /playlist/items/#${size}/url "$path"
  janosh set /playlist/items/#${size}/title "$title"
  janosh set /playlist/items/#${size}/source "$src"

  touch "$PLAYLIST_CACHE"
}
function loadStdin() {
  notify "Play live upload"
  rm -f "$MPLAYERSTDIN"
  mkfifo "$MPLAYERSTDIN"
  mplayer_cmd "pause"
  janosh -t set /player/active true
  mplayer_cmd "loadfile \"$MPLAYERSTDIN\""
  cat > "$MPLAYERSTDIN"
  mplayer_cmd "pt_step `cat "$(janosh -r get /playlist/index)"`"
}

function loadVideo() {
    playlistAdd "$1" "$2" "$3"
}

function enqueueVideo() {
    playlistAdd "$1" "$2" "$3"
}

function loadList() {
  (
    flock -x 200
    janosh -t set /player/active true
    mplayer_cmd "loadlist $1"
  ) 200>$CMD_LOCK
}

function loadAudio() {
  (
    flock -x 200
    playlistAdd "$1" "$2" "$3"
  ) 200>$CMD_LOCK
}

function previous() {
  jump "$[ `janosh -r get /playlist/index` - 1 ]"
}

function next() {
  jump "$[ `janosh -r get /playlist/index` + 1 ]"
}

function forward() {
  (
    flock -x 200
    mplayer_cmd "seek +10"
  ) 200>$CMD_LOCK
}

function forwardMore() {
  (
    flock -x 200
    mplayer_cmd "seek +300"
  ) 200>$CMD_LOCK
}

function rewind() {
  (
    flock -x 200
    mplayer_cmd "seek -10"
  ) 200>$CMD_LOCK
}

function rewindMore() {
  (
    flock -x 200
    mplayer_cmd "seek -300"
  ) 200>$CMD_LOCK
}

function pause() {
  (
    flock -x 200
    mplayer_cmd "pause"
  ) 200>$CMD_LOCK
}

function stop() {
  (
    set -x
    flock -x 200
    mplayer_cmd "pause"
    mplayer_cmd "stop"
    janosh -t set /player/active false
    refresh
  ) 200>$CMD_LOCK
}

function osd() {
  (
    flock -x 200
    mplayer_cmd "osd"
  ) 200>$CMD_LOCK
}

function subtitle() {
  (
    flock -x 200
    mplayer_cmd "sub_visibility"
  ) 200>$CMD_LOCK
}

##### callbacks ######

SOTRACK="DEMUXER: ==> Found"
EOTRACK="GLOBAL: EOF code: 1"
PATH_CHANGED="GLOBAL: ANS_path="
CACHEEMPTY="Cache empty"

function contains() {
  if [[ "$1" == *"$2"* ]]; then
    return 0
  else
    return 1
  fi
}

function eotrack() {
  (
    sleep 1:
    idx="$(janosh -r get /playlist/index)"
    [ -z "$idx" ] && idx=0
    len="$(janosh size /playlist/items/.)"

    if [ $idx -lt $[ $len - 1 ]  ]; then
      jump $[ $idx + 1 ]
    else
      janosh -t set /player/active false
      stop
    fi

    mplayer_cmd "get_property path"
  )
  refresh
}

function sotrack() {
  janosh -t set /player/active true
  mplayer_cmd "get_property path"
  killall showip
}


function cache_empty() {
  notify "Network Problem!"
}

function callback() {
  cat | while read line; do
    contains "$line" "$EOTRACK" && eotrack
    contains "$line" "$SOTRACK" && sotrack
    contains "$line" "$CACHEEMPTY" && cache_empty
  done
}

"$1" "$2" "$3" "$4" "$5"
